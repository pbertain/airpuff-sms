from flask import Flask, request, redirect
from lib import data_grabber
from lib import hampuff_lib
from numbers import Number
from twilio.rest import Client
from twilio.twiml.messaging_response import MessagingResponse

account_sid = 'ACa9dd12272b3de0539a2005c7e450b14c'
auth_token = 'f79b71e09ec390c05f0b180d5bda11b0'

app = Flask(__name__)

def get_wx(airport):
    metar_json = data_grabber.get_data(airport)
    try:
        name              = metar_json['data'][0]['station']['name']
    except:
        name = "Unknown Airport: " + airport.upper()
        airpuff_reply="AirPuff Airor: %s" \
            % (name)
        return str(airpuff_reply)
    try:
        date_obs          = metar_json['data'][0]['observed']
    except:
        date_obs          = 'NA'
    try:
        icao              = metar_json['data'][0]['icao']
    except:
        icao              = airport.upper()
    icao_lo           = icao.lower()
    try:
        flt_cat           = metar_json['data'][0]['flight_category']
    except:
        flt_cat           = "UNK"
    try:
        bar_hg            = metar_json['data'][0]['barometer']['hg']
    except:
        bar_hg            = 'UNK'
    try:
        ceil_code         = metar_json['data'][0]['clouds'][0]['code']
    except:
        ceil_code         = 'UNK'
    try:
        ceil_ft           = metar_json['data'][0]['clouds'][0]['feet']
    except:
        ceil_ft           = '12000'
    try:
        temp_f            = metar_json['data'][0]['temperature']['fahrenheit']
    except KeyError:
        temp_f            = 0
    except TypeError:
        temp_f            = 0
    try:
        dewpt_f           = metar_json['data'][0]['dewpoint']['fahrenheit']
    except KeyError:
        dewpt_f           = 0
    except TypeError:
        dewpt_f           = 0
    try:
        t_dp_spread_f     = temp_f - dewpt_f
    except:
        t_dp_spread_f     = 0
    try:
        vis_mi            = metar_json['data'][0]['visibility']['miles']
    except:
    	vis_mi            = -1
    try:
        win_deg           = metar_json['data'][0]["wind"]['degrees']
    except:
        win_deg           = 0
    if isinstance(win_deg, Number):
        empty_var         = "good"
    else:
        win_deg           = 0
    try:
        win_spd_kts       = metar_json['data'][0]["wind"]['speed_kts']
    except:
        win_spd_kts       = 0
    if isinstance(win_spd_kts, Number):
        empty_var         = "good"
    else:
        win_spd_kts           = 0
    raw                   = metar_json['data'][0]['raw_text']
    count                 = metar_json['results']

    airpuff_reply="AirPuff [%s]:\n  %s: [%s] %03d@%skts - %smi - %s | %sft - %dF/%dF(%d) - %0.2f\" [@%s]" \
% (icao, name, flt_cat.upper(), win_deg, win_spd_kts, vis_mi, ceil_code, ceil_ft, temp_f, dewpt_f, t_dp_spread_f, bar_hg, date_obs)
    return str(airpuff_reply)

@app.route("/sms", methods=['GET', 'POST'])
def sms_reply():
    """Respond to incoming calls with a simple text message."""

    full_body = request.values.get('Body', None)
    body = full_body.strip()
    if ('fuck' in body.lower()):
        sms_resp_body = "Go fuck yourself, too"
    elif ('hampuff' in body.lower()):
        sms_resp_body = "Wrong number.  Please text Hampuff at sms://+1-361-426-7833/ [361-HAM-PUFF]"
    else:
        sms_resp_body = get_wx(body)

    # Start our TwiML response
    resp = MessagingResponse()

    resp.message(sms_resp_body)

    return str(resp)

if __name__ == "__main__":
    app.run(debug=True, host='127.0.0.1', port=5000)

"""
Gathers band conditions and solar data to reply to an SMS with the latest update
"""
import datetime
import pytz
import requests
import xmltodict

USER_AGENT = 'HamPuff/14.074/220213'
HP_URL = 'http://www.hamqsl.com/solarxml.php'
HP_HDRS = {'User-Agent' : USER_AGENT}
HP_REQ = requests.get(HP_URL, params=HP_HDRS)
HP_RES = HP_REQ.text
MY_DICT = xmltodict.parse(HP_RES)
SOLARFLUX = MY_DICT['solar']['solardata']['solarflux']
A_INDEX = MY_DICT['solar']['solardata']['aindex']
K_INDEX = MY_DICT['solar']['solardata']['kindex']
SUNSPOTS = MY_DICT['solar']['solardata']['sunspots']
XRAY = MY_DICT['solar']['solardata']['xray']
HELIUMLINE = MY_DICT['solar']['solardata']['heliumline']
PROTONFLUX = MY_DICT['solar']['solardata']['protonflux']
ELECTRONFLUX = MY_DICT['solar']['solardata']['electonflux']
AURORA = MY_DICT['solar']['solardata']['aurora']
NORMALIZATION = MY_DICT['solar']['solardata']['normalization']
LATDEGREE = MY_DICT['solar']['solardata']['latdegree']
SOLARWIND = MY_DICT['solar']['solardata']['solarwind']
MAGNETICFIELD = MY_DICT['solar']['solardata']['magneticfield']
GEOMAGFIELD = MY_DICT['solar']['solardata']['geomagfield']
SIGNALNOISE = MY_DICT['solar']['solardata']['signalnoise']
FOF2 = MY_DICT['solar']['solardata']['fof2']
MUFFFACTOR = MY_DICT['solar']['solardata']['muffactor']
MUF = MY_DICT['solar']['solardata']['muf']

def hampuff_data(hampuff_args):
    # (1) Set the timezone
    PAC               = pytz.timezone('US/Pacific')
    EAS               = pytz.timezone('US/Eastern')

    hampuff_list = list(hampuff_args.lower())
    if len(hampuff_list) != 8:
        return("Hampuff Length Error")
    hp_timezone = hampuff_list[7]
    if hp_timezone=='e' or hp_timezone=='p':
        if hp_timezone=='e':
            hp_local_tz = EAS
        if hp_timezone=='p':
            hp_local_tz = PAC
        #return (hp_local_tz)
    else:
        return ("Hampuff Timezone Unknown Error - only Pacfic (hampuffp) and Eastern (hampuffe) are supported")
    # (2) Get the reported time
    HAMQSL_UPDATE     = MY_DICT['solar']['solardata']['updated']
    # (3) Figure out what format #2 is in
    HAMQSL_FMT        = '%d %b %Y %H%M %Z'
    # (4) Parse the time from #2 using the format in #3
    HAMQSL_CUR_TIME   = datetime.datetime.strptime(HAMQSL_UPDATE, HAMQSL_FMT).replace(tzinfo=datetime.timezone.utc)
    # (5) Convert the timezone
    HAMQSL_CONV_TIME  = HAMQSL_CUR_TIME.astimezone(hp_local_tz)
    # (6)Set the output format
    HAMQSL_OUT_FORMAT = '%a %d %b %H:%M'
    # (7) format the time
    HAMQSL_OUT_TIME      = datetime.datetime.strftime(HAMQSL_CONV_TIME, HAMQSL_OUT_FORMAT)

    hampuff_data = "[Hampuff]\t%-s: %s\n\t%-11s= %s\n\t%-11s= %s\n\t%-11s= %s\n\t%-11s= %s\n\t%-11s= %s\n\t%-11s= %s\n\t%-11s= %s" % \
        ("Updated", HAMQSL_OUT_TIME, "Solar Flux", SOLARFLUX, "A Index", A_INDEX, \
            "K Index", K_INDEX, "Sunspot #", SUNSPOTS, "MUF", MUF, "XRay", XRAY, "Solar Winds", SOLARWIND)
    return hampuff_data

